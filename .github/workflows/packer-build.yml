name: Packer Image Build


on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=3

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      NODE_ENV: test
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Match the test workflow version

      - name: Install dependencies
        run: npm install

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U $DB_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Tests
        run: npm test -- --forceExit

      - name: Build application artifact
        run: zip -r webapp.zip . -x "*.git*" "node_modules/*" "*.env" "*.zip"

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup GCP CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Initialize Packer plugins
        run: packer init csye6225-aws-gcp.pkr.hcl

      - name: Format check
        run: packer fmt -check csye6225-aws-gcp.pkr.hcl

      - name: Validate template
        run: |
          packer validate \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var "gcp_region=${{ secrets.GCP_REGION }}" \
            -var "gcp_demo_service_account=${{ secrets.GCP_DEMO_SERVICE_ACCOUNT }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_user=${{ secrets.DB_USER }}" \
            -var "db_password=${{ secrets.DB_PASS }}" \
            csye6225-aws-gcp.pkr.hcl

      - name: Build custom images
        run: |
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var "gcp_region=${{ secrets.GCP_REGION }}" \
            -var "gcp_demo_service_account=${{ secrets.GCP_DEMO_SERVICE_ACCOUNT }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_user=${{ secrets.DB_USER }}" \
            -var "db_password=${{ secrets.DB_PASS }}" \
            csye6225-aws-gcp.pkr.hcl

      - name: Share AMI with Dev and Demo accounts
        run: |
              AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=custom-node-postgres-app-*" --query 'Images[-1].ImageId' --output text)
              aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "{\"Add\":[{\"UserId\":\"${{ secrets.AWS_ACCOUNT_ID_DEV }}\"},{\"UserId\":\"${{ secrets.AWS_ACCOUNT_ID_DEMO }}\"}]}"

      - name: Share GCP Image with Demo Project
        run: |
                IMAGE_NAME=$(gcloud compute images list --project=${{ secrets.GCP_PROJECT_ID }} --filter="name~custom-node-postgres-app-*" --sort-by="~creationTimestamp" --limit=1 --format="value(NAME)")
                echo "Extracted Image Name: $IMAGE_NAME"
                if [ -z "$IMAGE_NAME" ]; then
                  echo "Error: No GCP image found!"
                  exit 1
                fi
                gcloud compute images add-iam-policy-binding $IMAGE_NAME \
                  --project=${{ secrets.GCP_PROJECT_ID }} \
                  --member="serviceAccount:${{ secrets.GCP_DEMO_SERVICE_ACCOUNT }}"
                  --role="roles/compute.imageUser"
      